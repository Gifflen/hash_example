#Here we have a super long config file

####Hash Example####
# This makes for a very simple config.
# Since it is an associative array we can
# add arbitary values as needed as well as overwrite specfic defaults using
# hash_behaviour = merge
# No matter how much we extend functionality or the configs change, our template
# is consistantly simple and trival to add variables to.

# You'll notice that when expose_bug is set to true in the playbook
# some_aribitrary_OS_specific_tweak disappears since merging behavior is
# different for include_vars.

{% for key, val in service_name.conf.iteritems() %}
{{ key }} = {{ val }}
{% endfor %}


####Name Spaced Example####
# Here we can see the complexity of the template increase with the number of
# values present. While this is more explicit for services with a lot of configuration
# options such as php and mysql this can become a bit unweildy.
max_memory = {{ service_name_conf_max_memory }}
user = {{ service_name_conf_user }}
group = {{ service_name_conf_group }}
some_flag = {{ service_name_conf_some_flag }}
os_specific_directory = {{ service_name_conf_os_specific_directory }}

# At this point we need to add multiple ways of inputting arbitrary data to
# keep them apart since we cannot merge the hashes. This makes overwritting
# arbitrary values found during os detection pretty tricky.
{% for key, val in service_name_conf_arbitrary_os_additions.iteritems() %}
{{ key }} = {{ val }}
{% endfor %}
{% for key, val in service_name_conf_arbitrary_playbook_additions.iteritems() %}
{{ key }} = {{ val }}
{% endfor %}


